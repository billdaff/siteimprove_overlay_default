<?php

/**
 * @file
 * Drupal Module: Siteimprove Plugin.
 *
 * Adds the required Javascript to node forms pages for show a little box
 * with the results from the latest SI scan of the current page.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function siteimprove_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if user has access.
  if (Drupal::currentUser()->hasPermission('use siteimprove')) {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $form_state->getFormObject()->getEntity();
    if (!$node->isNew()) {
      $form['#after_build'][] = 'Drupal\siteimprove\EntityFormAlter::siteimprove';

      if ($node->isPublished()) {
        // Add recheck button.
        $form['actions']['recheck'] = [
          '#attributes' => [
            'class' => ['recheck-button'],
          ],
          '#type'       => 'button',
          '#value'      => t('Siteimprove Recheck'),
          '#weight'     => 7,
        ];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function siteimprove_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if user has access.
  if (Drupal::currentUser()->hasPermission('use siteimprove')) {
    /** @var \Drupal\taxonomy\Entity\Term $term */
    $term = $form_state->getFormObject()->getEntity();
    if (!$term->isNew()) {
      $form['#after_build'][] = 'Drupal\siteimprove\EntityFormAlter::siteimprove';

      // Add recheck button.
      $form['actions']['recheck'] = [
        '#attributes' => [
          'class' => ['recheck-button'],
        ],
        '#type'       => 'button',
        '#value'      => t('Siteimprove Recheck'),
        '#weight'     => 7,
      ];
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function siteimprove_entity_insert(EntityInterface $entity) {
  if (Drupal::currentUser()->hasPermission('use siteimprove')) {
    switch ($entity->getEntityTypeId()) {
      case 'node':
        if (!empty($entity->get('status')->value)) {
          \Drupal::service('siteimprove.utils')->setSessionUrl($entity);
        }
        break;

      case 'taxonomy_term':
        \Drupal::service('siteimprove.utils')->setSessionUrl($entity);
        break;
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function siteimprove_entity_update(EntityInterface $entity) {
  if (Drupal::currentUser()->hasPermission('use siteimprove')) {
    switch ($entity->getEntityTypeId()) {
      case 'node':
        if (!empty($entity->get('status')->value)) {
          \Drupal::service('siteimprove.utils')->setSessionUrl($entity);
        }
        break;

      case 'taxonomy_term':
        \Drupal::service('siteimprove.utils')->setSessionUrl($entity);
        break;
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function siteimprove_page_attachments(array &$attachments) {
  // Check if user has access.
  if (\Drupal::currentUser()->hasPermission('use siteimprove')) {

    // Add Siteimprove js.
    $siteimprove = \Drupal::service('siteimprove.utils');
    $attachments['#attached']['drupalSettings']['siteimprove']['token'] = $siteimprove->getSiteimproveToken();
    $attachments['#attached']['library'][] = $siteimprove->getSiteimproveOverlayLibrary();
    $attachments['#attached']['library'][] = $siteimprove->getSiteimproveLibrary();

    // If node page or taxonomy term page, add input method, else domain method.
    $route_match = \Drupal::routeMatch();
    if ($route_match->getRouteName() == 'entity.node.canonical'
        || $route_match->getRouteName() == 'entity.taxonomy_term.canonical') {
      $method = 'input';
    }
    elseif ($route_match->getRouteName() != 'entity.node.edit_form'
        && $route_match->getRouteName() != 'entity.taxonomy_term.edit_form') {
      $method = 'domain';
    }
    if (!empty($method)) {
      $url = Url::fromRoute('<current>', [], ['absolute' => TRUE])->toString();
      $attachments['#attached']['drupalSettings']['siteimprove'][$method] = $siteimprove->getSiteimproveSettings($url, $method);
    }

    // If exist siteimprove_url in SESSION, send to Siteimprove.
    if (!empty($_SESSION['siteimprove_url'])) {
      if (count($_SESSION['siteimprove_url']) > 1) {
        $url = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
        $method = 'recrawl';
      }
      else {
        $url    = array_pop($_SESSION['siteimprove_url']);
        $method = 'recheck';
      }
      $attachments['#attached']['drupalSettings']['siteimprove'][$method] = $siteimprove->getSiteimproveSettings($url, $method);
      unset($_SESSION['siteimprove_url']);
    }
  }
}
