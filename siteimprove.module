<?php

/**
 * @file
 * Drupal Module: Siteimprove Plugin.
 *
 * Adds the required Javascript to node forms pages for show a little box
 * with the results from the latest SI scan of the current page.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function siteimprove_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the siteimprove module.
    case 'help.page.siteimprove':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Siteimprove Plugins – Your Insights Always Within Reach!') . '</p>';
      $output .= '<p>' . t('The Siteimprove plugin bridges the gap between Drupal and the Siteimprove Intelligence Platform.') . '</p>';
      $output .= '<p>' . t('Thanks to the seamless integration, you are now able to put your Siteimprove results to use where they are most valuable – during your content creation and editing process.') . '</p>';
      $output .= '<p><a href="https://www.drupal.org/docs/contributed-modules/siteimprove" target="_blank" title="Siteimprove module documentation guide on Drupal.org">' . t('Find more help in the documentation guide on drupal.org') . '.</a></p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function siteimprove_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $build_info = $form_state->getBuildInfo();
  if (!empty($build_info['base_form_id']) && ($build_info['base_form_id'] == 'node_form' || $build_info['base_form_id'] == 'taxonomy_term_form')) {
    // Check if user has access.
    if (Drupal::currentUser()->hasPermission('use siteimprove')) {
      /** @var \Drupal\Core\Entity\EntityInterface $entity */
      $entity = $form_state->getFormObject()->getEntity();
      if (!$entity->isNew()) {
        $form['#after_build'][] = 'Drupal\siteimprove\EntityFormAlter::siteimprove';
        if (($build_info['base_form_id'] == 'node_form' && $entity->isPublished()) || $build_info['base_form_id'] == 'taxonomy_term_form') {
          // Add recheck button.
          $form['actions']['recheck'] = [
            '#attributes' => [
              'class' => ['recheck-button'],
            ],
            '#type'       => 'button',
            '#value'      => t('Siteimprove Recheck'),
            '#weight'     => 7,
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function siteimprove_entity_insert(EntityInterface $entity) {
  _siteimprove_entity_save($entity);
}

/**
 * Implements hook_entity_update().
 */
function siteimprove_entity_update(EntityInterface $entity) {
  _siteimprove_entity_save($entity);
}

/**
 * Entity save common method.
 */
function _siteimprove_entity_save(EntityInterface $entity) {
  if (Drupal::currentUser()->hasPermission('use siteimprove')) {
    switch ($entity->getEntityTypeId()) {
      case 'node':
        if (!empty($entity->get('status')->value)) {
          \Drupal::service('siteimprove.utils')->setSessionUrl($entity);
        }
        break;

      case 'taxonomy_term':
        \Drupal::service('siteimprove.utils')->setSessionUrl($entity);
        break;
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function siteimprove_page_attachments(array &$attachments) {
  // Check if user has access.
  if (\Drupal::currentUser()->hasPermission('use siteimprove')) {

    // Add Siteimprove js.
    $siteimprove = \Drupal::service('siteimprove.utils');
    $attachments['#attached']['drupalSettings']['siteimprove']['token'] = $siteimprove->getSiteimproveToken();
    $attachments['#attached']['library'][] = $siteimprove->getSiteimproveOverlayLibrary();
    $attachments['#attached']['library'][] = $siteimprove->getSiteimproveLibrary();

    // Get the active frontend domain plugin.
    $config = \Drupal::service('config.factory')->get('siteimprove.settings');
    $plugin_manager = \Drupal::getContainer()->get('plugin.manager.siteimprove_domain');
    $plugin_id = $config->get('domain_plugin_id');
    /** @var \Drupal\siteimprove\Plugin\SiteimproveDomainBase $plugin */
    $plugin = $plugin_manager->createInstance($plugin_id);

    // If node page or taxonomy term page, add input method, else domain method.
    $route_match = \Drupal::routeMatch();
    if ($route_match->getRouteName() == 'entity.node.canonical'
        || $route_match->getRouteName() == 'entity.taxonomy_term.canonical') {
      $method = 'input';
    }
    elseif ($route_match->getRouteName() != 'entity.node.edit_form'
        && $route_match->getRouteName() != 'entity.taxonomy_term.edit_form') {
      $method = 'domain';
    }
    if (!empty($method)) {
      $parameters = \Drupal::routeMatch()->getParameters();
      foreach ($parameters as $param) {
        if (is_object($param) && $param instanceof \Drupal\Core\Entity\ContentEntityInterface) {
          if ($param->in_preview !== TRUE) {
            /** @var \Drupal\Core\Entity\ContentEntityType $type */
            $entity_type = $param->getEntityType()->id();
            $id = $param->id();
            $entity = \drupal::entityTypeManager()->getStorage($entity_type)->load($id);
            $urls = \drupal::service('siteimprove.utils')->getEntityUrls($entity);
            $attachments['#attached']['drupalSettings']['siteimprove'][$method] = $siteimprove->getsiteimprovesettings($urls, $method);
          }
        }
      }
    }

    // If siteimprove_url exists in SESSION, send to Siteimprove.
    if (!empty($_SESSION['siteimprove_url'])) {
      $urls = $_SESSION['siteimprove_url'];
      $method = 'recheck';
      $attachments['#attached']['drupalSettings']['siteimprove'][$method] = $siteimprove->getSiteimproveSettings($urls, $method);
      unset($_SESSION['siteimprove_url']);
    }
  }
}
